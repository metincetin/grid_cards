local game_data = require "modules.game_data"

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed

	msg.post(".", "acquire_input_focus")
end

cards = { {}, {}, {} }
player = nil

function generate()
	for x = 0, 2, 1
	do
		for y = 0, 2, 1
		do
			create_card(x + 1, y + 1)
		end
	end
end

function handle_swipe(message)
	local url = msg.url("main", player, "card")
	local position = go.get(url, "grid_position")
	local damage = go.get(url, "damage")

	if is_position_available(position.x + message.x, position.y + message.y) then
		local target = get_card_of_position(position.x + message.x, position.y + message.y)
		local received_damage = go.get(msg.url("main", target, "card"), "damage")

		msg.post(target, "apply_damage",
			{ damage = damage, direction = message, attacker = get_card_of_position(position.x, position.y) })
		msg.post(player, "apply_damage",
			{ damage = received_damage, direction = { x = -message.x, y = -message.y, attacker = target } })
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("generate") then
		generate()
		reposition()
	end
	if message_id == hash("handle_swipe") then
		handle_swipe(message)
	end
	if message_id == hash("set_player") then
		player = get_card_of_position(message.x, message.y)
		msg.post(player, "assign_card", game_data.get_card_by_name("Player"))
	end
	if message_id == hash("randomize") then
		for x, lines in ipairs(cards) do
			for y, card in ipairs(lines) do
				msg.post(card, "assign_card", game_data.get_random_card())
			end
		end
	end
	if message_id == hash("card_died") then
		local died_position = message.position

		cards[died_position.x][died_position.y] = nil

		local attacker_position = go.get(msg.url("main", player, "card"), "grid_position")
		local group = math.abs(message.direction.x) > 0 and get_line_horizontal(died_position.x, died_position.y) or
			get_line_vertical(died_position.x, died_position.y)

		if message.direction.x > 0 then
			table.sort(group, function(a, b) return a.x > b.x end)
		end
		if message.direction.y > 0 then
			table.sort(group, function(a, b) return a.y > b.y end)
		end

		for i, v in ipairs(group) do

			if is_position_available(v.x + message.direction.x, v.y + message.direction.y) then
				move(v.x, v.y, v.x + message.direction.x, v.y + message.direction.y)
			end
		end
		fill_empty()
		reposition()

	end
end

function move(from_x, from_y, to_x, to_y)
	local from_card = get_card_of_position(from_x, from_y)
	if (from_card == nil) then return end
	go.set(msg.url("main", from_card, "card"), "grid_position", vmath.vector3(to_x, to_y, 0))
	cards[to_x][to_y] = from_card
	cards[from_x][from_y] = nil
end

function slide(x, y, direction)
	local cards_to_move
end

function fill_empty()
	for x = 1, 3, 1 do
		for y = 1, 3, 1 do
			if get_card_of_position(x, y) == nill then
				local card = create_card(x, y)
				msg.post(card, "assign_card", game_data.get_random_card())
			end
		end
	end
	reposition()
end

function create_card(x, y)
	local inst = collectionfactory.create("#collectionfactory")

	local hh = inst["/go"]

	-- cards[3 * x + y + 1] = hh

	cards[x][y] = hh


	local url = msg.url("main", hh, "card")

	go.set(url, "grid_position", vmath.vector3(x, y, 0))

	go.set(hh, "scale", 0)
	go.animate(hh, "scale", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_OUTBACK, .4)

	local grid_position = go.get_position()

	local target_position = grid_position + calculate_target_position(x, y)

	-- fx offsetting ??
	target_position.y = target_position.y - 32
	go.set_position(target_position, hh)

	return hh
end

function get_line_horizontal(pos_x, pos_y)
	local ret = {}
	for x = 1, 3, 1 do
		for y = 1, 3, 1 do
			if pos_y == y then
				table.insert(ret, { x = x, y = y })
			end
		end
	end
	return ret
end

function get_line_vertical(pos_x, pos_y)
	local ret = {}
	for x = 1, 3, 1 do
		for y = 1, 3, 1 do
			if pos_x == x then
				table.insert(ret, { x = x, y = y })
			end
		end
	end
	return ret
end

function swap(from_x, from_y, to_x, to_y)
	local from_card = get_card_of_position(from_x, from_y)
	local to_card = get_card_of_position(to_x, to_y)

	go.set(msg.url("main", from_card, "card"), "grid_position", vmath.vector3(to_x, to_y, 0))
	go.set(msg.url("main", to_card, "card"), "grid_position", vmath.vector3(from_x, from_y, 0))

	cards[from_x][from_y] = to_card
	cards[to_x][to_y] = from_card

	reposition()
end

function calculate_target_position(x, y)
	local card_size = vmath.vector3(101, 128, 0)
	return vmath.vector3((x - 1) * card_size.x - card_size.x * 0.5, (y - 1) * card_size.y - card_size.y * 0.5, 0)
end

function reposition()
	for x = 1, 3, 1
	do
		for y = 1, 3, 1
		do
			local pos = { x = x, y = y }

			local grid_position = go.get_position()

			local target_pos = grid_position + calculate_target_position(x, y)
			if cards[x][y] ~= nill then
				go.animate(cards[x][y], "position", go.PLAYBACK_ONCE_FORWARD, target_pos, go.EASING_OUTCUBIC, .5)
			end
		end
	end
end

function is_position_available(x, y)
	return (x > 0 and x < 4) and (y > 0 and y < 4)
end

function get_card_of_position(x, y)
	return cards[x][y]
end

function get_card(url)
	for x = 1, 3, 1 do
		for y = 1, 3, 1 do
			if cards[x][y] == url then
				return { card = cards[x][y], x = x, y = y }
			end
		end
	end
end

local mouse_pressed = false

function on_input(self, action_id, action)
	if action.pressed then
		mouse_pressed = true
	end
	if action.released then
		mouse_pressed = false
	end

	if not mouse_pressed then
		return
	end

	local swipe_horizontal = math.abs(action.dx) > 10
	local swipe_vertical = math.abs(action.dy) > 10

	if swipe_horizontal then
		mouse_pressed = false
		handle_swipe({ x = (action.dx > 0 and 1 or -1), y = 0 })
	elseif swipe_vertical then
		mouse_pressed = false
		handle_swipe({ x = 0, y = (action.dy > 0 and 1 or -1) })
	end
end
